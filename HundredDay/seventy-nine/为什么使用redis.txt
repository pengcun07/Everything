Redis为何这么快--数据存储角度 https://my.oschina.net/liughDevelop/blog/2236771


1.什么是redis
	Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。
	Redis 与其他 key - value 缓存产品有以下三个特点：
	(1)Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。
	(2)Redis支持多种数据结构类型的数据，包括key-value，list，set，zset，hash等数据结构的存储。
	(3)Redis支持数据的备份，即master-slave模式的数据备份。


2.为什么使用redis
	主要是从两个角度去考虑:性能和并发。
	碰到需要执行耗时特别久，且结果不频繁变动的SQL，就特别适合将运行结果放入缓存。
	在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。
 

3.redis为什么这么快
	性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s。
	(1)纯内存操作
	(2)单线程操作，避免了频繁的上下文切换
	(3)采用了非阻塞I/O多路复用机制


4.redis的数据类型，以及每种数据类型的使用场景
	(1) String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。常规key-value缓存应用； 常规计数：微博数，粉丝数等。
	(2) Hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。Session服务器的效果。
	(3) List就是链表，可以做简单的消息队列的功能。可以利用lrange命令，做基于redis的分页功能。
	(4) Set就是一个集合，集合的概念就是一堆不重复值的组合。就是利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，独有喜好等功能。
	(5) Sorted Set 比set多了一个权重参数score,集合中的元素能够按score进行排列。
	可以做排行榜应用，取TOP N操作。sorted set可以用来做延时任务。也可以做范围查找。
Redis的三大衍生数据类型
	bitmaps
	其实它就是String，但是它可以对String的位进行操作。
	可以统计一定时间内的，活跃的用户数。（局限性uid是UUID哈希碰撞）
	hypeloglog
	并不是一种数据结构，而是一种算法，可以利用极小的内存空间完成独立总数的统计。我们java中有一个库叫stream-lib，其中也实现了HyperLogLog算法。
	这个结构可以非常省内存的去统计各种计数，比如注册IP数、每日访问IP数。当然，存在误差！Redis官方给出的数字是0.81%的失误率。
	geo
	Geo可以用于存储经纬度、计算两地之间的距离、范围计算等。其底层实现是zset。
	计算两个坐标之间的距离，
	计算距离经纬度(15,37)距离100km范围内的坐标有哪些


5.redis的过期策略以及内存淘汰机制
	redis采用的过期策略：定期删除+惰性删除策略。
		定期删除：redis默认每个100ms检查，随机抽取进行检查，是否有过期的key，有过期key则删除。
		惰性删除：获取某个key的时候，redis会检查一下，这个key过期则删除 。
	内存淘汰策略：
		在redis.conf中有一行配置
		# maxmemory-policy volatile-lru
		(1) noeviction：新写入操作会报错。（当内存不足以容纳新写入数据时）
		(2) allkeys-lru：在键空间中，移除最近最少使用的key。
		(3) allkeys-random：在键空间中，随机移除某个key。
		(4) volatile-lru：在设置了过期时间的键空间中，移除最近最少使用的key。
		(5) volatile-random：在设置了过期时间的键空间中，随机移除某个key。
		(6) volatile-ttl：在设置了过期时间的键空间中，有更早过期时间的key优先移除。


6.redis和数据库双写一致性问题
	三种更新策略：
	(1)先更新数据库，再更新缓存
	线程安全角度：会出现脏数据。
	业务场景角度：读少写多和复杂计算（浪费性能）
	(2)先删除缓存，再更新数据库
	(3)先更新数据库，再删除缓存（补偿机制，消息队列）


7.如何应对缓存穿透和缓存雪崩问题
	缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。
		(1)互斥锁
		(2)异步更新
		(3)请求拦截（布隆过滤器、key规则校验）
	缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。
		(1)互斥锁
		(2)缓存时间随机
		(3)双重缓存


8.如何解决redis的并发竞争key问题
	(1)如果对这个key操作，不要求顺序
		准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。
	(2)如果对这个key操作，要求顺序
		保存一个时间戳，发现自己的时间戳与缓存中的时间戳早，那就不做set操作。


9.Redis持久化的方式
	(1)Redis的第一个持久化策略：RDB快照 
		RDB配置：
		1、save 900 1  每900秒有一次以上更新
		2、save 300 10 每30秒有十次以上更新
		3、save 60 10000 每30秒有一万次以上更新
		工作原理
		Redis forks
		子进程开始将数据写到临时RDB文件中。
		当子进程完成写RDB文件，用新文件替换老文件。
		这种方式可以使Redis使用copy-on-write技术。
	(2)Redis的第二个持久化策略：AOF日志
		AOF文件是可识别的纯文本，它的内容就是一个个的Redis标准命令。
		AOF重写AOF文件会越来越大，所以Redis又提供了一个功能，叫做AOF rewrite。
		Redis forks
		子进程遍历数据，写入新的AOF临时文件
		写操作日志还是会写到原来老的 AOF文件中，同时还会记录在内存缓冲区中。
		子进程完成重写，会将所有缓冲区中的日志一次性写入到临时文件中。
		然后调用原子性的rename命令用新的 AOF文件取代老的AOF文件
		Aof配置：
		1、appendfsync no Redis不会主动调用fsync去将AOF日志内容同步到磁盘
		2、appendfsync everysec Redis会默认每隔一秒进行一次fsync调用
		3、appednfsync always 每一次写操作都会调用一次fsync

	综合使用AOF和RDB两种持久化机制，用AOF保证数据不丢失，作为数据恢复的第一选择，用RDB来做不同程度的冷备，
	在AOF文件丢失或者不可用的情况下，可以使用RDB来进行数据恢复。
	AOF和RDB同时工作需要注意的点
	如果RDB在执行snapshotting操作，那么redis不会执行AOF rewrite，如果redis在执行AOF rewrite，则不会执行RDB的snapshotting
	如果RDB在执行snapshotting，此时用户执行BGREWRITEAOF命令，那么会等待RDB执行完毕，再去至执行AOF rewrite
	同时有RDB snapshot文件和AOF日志文件，那么redis重启的时候，会优先使用AOF进行数据恢复，因为其中的日志更完整


10.什么时候不适用redis
	大规模数据
	冷数据


11.Redis扩容、节点故障、读写分离
	一致性哈希，就是提供一个hashtable,它能在节点加入离开时不会导致映射关系的重大变化
	Redis Sharding采用客户端Sharding方式，服务端Redis还是一个个相对独立的Redis实例节点，没有做任何变动。

	一个Redis节点切片包含一个主Redis（无持久化）和一个备Redis（AOF+RDB）。

	高访问量下，即使采用Sharding分片，一个单独节点还是承担了很大的访问压力，这时我们还需要进一步分解。
	利用主从模式实现读写分离，主负责写，从负责只读，同时一主挂多个从。

12.redis和memcahe的差异
	Redis的作者Salvatore Sanfilippo曾经对这两种基于内存的数据存储系统进行过比较：
	(1)  Redis支持服务器端的数据操作：Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在Memcached里，
	你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。
	在Redis中，这些复杂的操作通常和一般的GET/SET一样高效。所以，如果需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。
	(2) 内存使用效率对比：使用简单的key-value存储的话，Memcached的内存利用率更高，而如果Redis采用hash结构来做key-value存储，
	由于其组合式的压缩，其内存利用率会高于Memcached。
	(3) 性能对比：由于Redis只使用单核，而Memcached可以使用多核，所以平均每一个核上Redis在存储小数据时比Memcached性能更高。
	而在100k以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起Memcached，还是稍有逊色。
	1、数据类型支持不同
		与Memcached仅支持简单的key-value结构的数据记录不同，Redis支持的数据类型要丰富得多。
	2、内存管理机制不同
		在Redis中，并不是所有的数据都一直存储在内存中的。这是和Memcached相比一个最大的区别。当物理内存用完时，Redis可以将一些很久没用到的value交换到磁盘。
	3、数据持久化支持
		Redis虽然是基于内存的存储系统，但是它本身是支持内存数据的持久化，而且提供两种主要的持久化策略：RDB快照和AOF日志。而memcached是不支持数据持久化操作的。
	4、集群管理的不同
	相较于Memcached只能采用客户端实现分布式存储，Redis更偏向于在服务器端构建分布式存储。最新版本的Redis已经支持了分布式存储功能。
	Redis Cluster是一个实现了分布式且允许单点故障的Redis高级版本，它没有中心节点，具有线性可伸缩的功能。



Redis是什么

	Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.
	Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。


Redis数据类型
	It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. 
	它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。

	1、Strings类型：一个String类型的value最大可以存储512M

	2、Lists类型：list的元素个数最多为2^32-1个，也就是4294967295个。

	3、Sets类型：元素个数最多为2^32-1个，也就是4294967295个。

	4、Hashes类型：键值对个数最多为2^32-1个，也就是4294967295个。

	5、Sorted sets类型：跟Sets类型相似。

	6、Bitmaps类型：其实它就是String，但是它可以对String的位进行操作。

	7、HyperLogLogs类型：这是被用于估计一个 set 中元素数量的概率性的数据结构。

	8、Geospatial类型：存储地理空间位置（纬度、经度、名称）。

Redis数据类型使用场景
	1、Strings类型：常规key-value缓存应用； 常规计数：微博数，粉丝数等。

	2、Lists类型：可以做简单的消息队列的功能。可以利用lrange命令，做基于redis的分页功能。

	3、Sets类型：利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，独有喜好等功能。

	4、Hashes类型：hash特别适合用于存储对象。Session服务器的效果。

	5、Sorted sets类型：可以做排行榜应用，取TOP N操作。可以用来做延时任务。也可以做范围查找。

	6、Bitmaps类型：可以统计一定时间内的，活跃的用户数。（局限性uid是UUID哈希碰撞）

	7、HyperLogLogs类型：这个结构可以非常省内存的去统计各种计数，比如注册IP数、每日访问IP数。当然，存在误差！Redis官方给出的数字是0.81%的失误率。(占比对比图)

	8、Geospatial类型：计算两地之间的距离、范围计算等。

为什么使用redis(缓存)

	1、性能：碰到需要执行耗时特别久，且结果不频繁变动的SQL，就特别适合将运行结果放入缓存。
	
	2、并发：在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。
	
Redis为什么会这么快

	1、Redis是纯内存操作，需要的时候需要我们手动持久化到硬盘中

	2、Redis是单线程，从而避开了多线程中上下文频繁切换的操作。

	3、Redis数据结构简单、对数据的操作也比较简单

	4、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。

	5、使用多路I/O复用模型，非阻塞I/O

为什么缓存选择Redis	
	
	Redis 与其他 key - value 缓存产品有以下三个特点：
	
	1、Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。
	
	2、Redis支持多种数据结构类型的数据，包括key-value，list，set，zset，hash等数据结构的存储。
	
	3、Redis支持数据的备份，即master-slave模式的数据备份。
	
什么时候不适用redis(缓存)

	1、数据规模大小角度：
	
		主要取决于成本的预算控制和应用读多写少的程度决定的。
	
	2、数据冷热程度的角度：
	
		冷数据进行了缓存，那是对内存资源的一种浪费。	



Redis的过期策略以及内存淘汰机制

	1、redis采用的过期策略：定期删除+惰性删除策略。
		定期删除：redis默认每个100ms检查，随机抽取进行检查，是否有过期的key，有过期key则删除。
		惰性删除：获取某个key的时候，redis会检查一下，这个key过期则删除。
		
	2、内存淘汰策略：
		在redis.conf中有一行配置
		# maxmemory-policy volatile-lru
		(1) noeviction：新写入操作会报错。（当内存不足以容纳新写入数据时）
		(2) allkeys-lru：在键空间中，移除最近最少使用的key。
		(3) allkeys-random：在键空间中，随机移除某个key。
		(4) volatile-lru：在设置了过期时间的键空间中，移除最近最少使用的key。
		(5) volatile-random：在设置了过期时间的键空间中，随机移除某个key。
		(6) volatile-ttl：在设置了过期时间的键空间中，有更早过期时间的key优先移除。

Redis缓存的数据一致性
	缓存能做的只能保证数据的最终一致性。
	
	三种更新策略：
	
	1、先更新数据库，再更新缓存

	2、先删除缓存，再更新数据库
	
	3、先更新数据库，再删除缓存


如何应对缓存穿透和缓存雪崩问题

	1、缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。
	(1)互斥锁
	(2)异步更新
	(3)请求拦截（布隆过滤器、key规则校验）
	
	2、缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。
	(1)互斥锁
	(2)缓存时间随机
	(3)双重缓存
	
如何解决redis的并发竞争key问题

	1、如果对这个key操作，不要求顺序
	准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。
	
	2、如果对这个key操作，要求顺序
	保存一个时间戳，发现自己的时间戳与缓存中的时间戳早，那就不做set操作。


Redis持久化的方式

	Redis的第一个持久化策略：RDB快照 
	1、RDB配置：
		save 900 1  每900秒有一次以上更新
		save 300 10 每30秒有十次以上更新
		save 60 10000 每30秒有一万次以上更新
	2、工作原理
		Redis forks
		子进程开始将数据写到临时RDB文件中。
		当子进程完成写RDB文件，用新文件替换老文件。
		这种方式可以使Redis使用copy-on-write技术。
		
	Redis的第二个持久化策略：AOF日志
	AOF文件是可识别的纯文本，它的内容就是一个个的Redis标准命令。
	AOF重写AOF文件会越来越大，所以Redis又提供了一个功能，叫做AOF rewrite。
	
	1、Aof配置：
		appendfsync no Redis不会主动调用fsync去将AOF日志内容同步到磁盘
		appendfsync everysec Redis会默认每隔一秒进行一次fsync调用
		appednfsync always 每一次写操作都会调用一次fsync
	
	2、工作原理
		Redis forks
		子进程遍历数据，写入新的AOF临时文件
		写操作日志还是会写到原来老的 AOF文件中，同时还会记录在内存缓冲区中。
		子进程完成重写，会将所有缓冲区中的日志一次性写入到临时文件中。
		然后调用原子性的rename命令用新的 AOF文件取代老的AOF文件
		
Redis扩容、节点故障、读写分离

	1、扩容：一致性哈希  分片
	
	2、节点故障：主从，故障转移  主不进行持久化、从节点进行持久化
	
	3、读写分离：主进行写、多从进行读
	
Redis和memcahe的差异

Redis的作者Salvatore Sanfilippo曾经对这两种基于内存的数据存储系统进行过比较：
	1、Redis支持服务器端的数据操作：
		Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，
		通常在Memcached里，你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。
		在Redis中，这些复杂的操作通常和一般的GET/SET一样高效。
		所以，如果需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。
	2、内存使用效率对比：
		使用简单的key-value存储的话，Memcached的内存利用率更高，
		而如果Redis采用hash结构来做key-value存储，
		由于其组合式的压缩，其内存利用率会高于Memcached。
	3、性能对比：
		由于Redis只使用单核，而Memcached可以使用多核，所以平均每一个核上Redis在存储小数据时比Memcached性能更高。
		而在100k以上的数据中，Memcached性能要高于Redis，
		虽然Redis最近也在存储大数据的性能上进行优化，但是比起Memcached，还是稍有逊色。
	
	1、数据类型支持不同
		与Memcached仅支持简单的key-value结构的数据记录不同，Redis支持的数据类型要丰富得多。
	2、内存管理机制不同
		在Redis中，并不是所有的数据都一直存储在内存中的。这是和Memcached相比一个最大的区别。
		当物理内存用完时，Redis可以将一些很久没用到的value交换到磁盘。
	3、数据持久化支持
		Redis虽然是基于内存的存储系统，但是它本身是支持内存数据的持久化。
	4、集群管理的不同
		相较于Memcached只能采用客户端实现分布式存储，
		Redis更偏向于在服务器端构建分布式存储。










